input {
  kafka {
    bootstrap_servers => "kafka:9092"
    topics => ["scraper-data"]
    codec => "json"
    group_id => "logstash-group"
    auto_offset_reset => "earliest"
    consumer_threads => 1
  }
}

filter {
  # Ajout d'un timestamp si non présent
  if ![timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }

  # Conversion des coordonnées en geo_point pour Elasticsearch
  if [coordinates] {
    mutate {
      rename => { "[coordinates][lat]" => "[location][lat]" }
      rename => { "[coordinates][lang]" => "[location][lon]" }
    }

    # Création d'un champ geo_point pour Elasticsearch
    mutate {
      add_field => { "[location][geo_point]" => "%{[location][lat]},%{[location][lon]}" }
    }
  }

  # Traitement du numéro de téléphone
  if [phone_number] {
    mutate {
      gsub => [
        "phone_number", "[^0-9]", ""
      ]
    }

    if [phone_number] =~ /^0[567]\d{8}$/ {
      mutate {
        add_field => { "formatted_phone" => "%{phone_number}" }
      }
      mutate {
        gsub => [
          "formatted_phone", "(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})", "0\1 \2 \3 \4 \5"
        ]
      }
    }
  }

  # Traitement des réseaux sociaux
  if [social_networks] {
    ruby {
      code => "
        social_networks = event.get('social_networks')
        if social_networks.is_a?(Array) && !social_networks.empty?
          social_types = {}

          social_networks.each do |url|
            if url.include?('facebook.com')
              social_types['facebook'] = url
            elsif url.include?('instagram.com')
              social_types['instagram'] = url
            elsif url.include?('twitter.com') || url.include?('x.com')
              social_types['twitter'] = url
            elsif url.include?('linkedin.com')
              social_types['linkedin'] = url
            elsif url.include?('youtube.com')
              social_types['youtube'] = url
            end
          end

          event.set('social_media', social_types)
          event.set('has_social_media', true)
          event.set('social_media_count', social_types.size)
        else
          event.set('has_social_media', false)
          event.set('social_media_count', 0)
        end
      "
    }
  }

  # Traitement de la note (rating)
  if [rating] {
    mutate {
      convert => { "rating" => "float" }
    }

    if [rating] >= 4.5 {
      mutate { add_field => { "rating_category" => "excellent" } }
    } else if [rating] >= 4.0 {
      mutate { add_field => { "rating_category" => "très bon" } }
    } else if [rating] >= 3.5 {
      mutate { add_field => { "rating_category" => "bon" } }
    } else if [rating] >= 3.0 {
      mutate { add_field => { "rating_category" => "moyen" } }
    } else {
      mutate { add_field => { "rating_category" => "à améliorer" } }
    }
  }

  # Traitement du nombre d'avis
  if [review_count] {
    mutate {
      convert => { "review_count" => "integer" }
    }

    if [review_count] >= 500 {
      mutate { add_field => { "popularity" => "très populaire" } }
    } else if [review_count] >= 100 {
      mutate { add_field => { "popularity" => "populaire" } }
    } else if [review_count] >= 50 {
      mutate { add_field => { "popularity" => "modéré" } }
    } else {
      mutate { add_field => { "popularity" => "peu connu" } }
    }
  }

  # Traitement de la fourchette de prix
  if [price_range] {
    ruby {
      code => "
        price = event.get('price_range')
        if price && price.is_a?(String)
          if price.include?('MAD')
            price_level = price.scan(/MAD/).size
            event.set('price_level', price_level)

            case price_level
            when 1
              event.set('price_category', 'économique')
            when 2
              event.set('price_category', 'intermédiaire')
            when 3
              event.set('price_category', 'élevé')
            when 4..Float::INFINITY
              event.set('price_category', 'luxe')
            end
          end
        end
      "
    }
  }

  # Enrichissement avec des informations sur le site web
  if [website] {
    ruby {
      code => "
        website = event.get('website')
        if website && website.is_a?(String)
          domain = website.gsub(/^https?:\/\//, '').gsub(/^www\./, '').split('/')[0]
          event.set('website_domain', domain)

          is_https = website.start_with?('https://')
          event.set('website_secure', is_https)

          if domain.include?('wix.com') || domain.include?('wordpress.com') ||
             domain.include?('blogspot.com') || domain.include?('squarespace.com')
            event.set('website_type', 'plateforme')
          else
            event.set('website_type', 'domaine personnalisé')
          end
        end
      "
    }
  }

  # Ajout d'un champ de recherche global
  mutate {
    add_field => {
      "search_text" => "%{company_name} %{[address][city]} %{cuisine}"
    }
  }

  # Découpage des adresses
  grok {
    match => { "address" => "%{DATA:street}, %{DATA:district}, %{DATA:city}, %{DATA:province}, %{DATA:region}, %{DATA:postal_code}, %{DATA:country}" }
  }
  
  ruby {
    code => "
      ['city', 'province', 'region', 'country'].each do |field|
        val = event.get(field)
        if val
          val = val.gsub(/[\u0600-\u06FF\u2D30-\u2D7F]/, '')  # supprime arabe et amazigh
          event.set(field, val.strip)
        end
      end
    "
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "business-%{+YYYY.MM.dd}"
    document_id => "%{company_RC}"
    action => "index"
  }

  stdout {
    codec => rubydebug
  }
}
